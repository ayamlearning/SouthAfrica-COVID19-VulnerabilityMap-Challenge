import csv
import numpy as np
import pandas as pd
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.ensemble import VotingRegressor
from sklearn import preprocessing
import xgboost
from sklearn.metrics import mean_squared_error
from sklearn.utils import shuffle
import utilities
import pickle


class model:
    def __init__(self,x_train,y_train,x_test,y_test):
        self.x_train=x_train
        self.y_train=y_train
        self.x_test=x_test
        self.y_test=y_test
        self.best_model=None
        self.model_xg=None
        self.model_rf=None
        self.model_voting=None

    def xgboost(self):
        self.model_xg=xgboost.XGBRegressor()
        self.model_xg.fit(self.x_train,self.y_train)

        y_pred=self.model_xg.predict(self.x_test)

        result=utilities.return_dic(y_pred,self.y_test)
        return result


    def RandomForest(self):
        self.model_rf=RandomForestRegressor(random_state=1, n_estimators=100)
        self.model_rf.fit(self.x_train,self.y_train)

        y_pred=self.model_rf.predict(self.x_test)

        result=utilities.return_dic(y_pred,self.y_test)
        return result


    def Voting(self):
        reg1 = GradientBoostingRegressor(random_state=1, n_estimators=100)
        reg2 = RandomForestRegressor(random_state=1, n_estimators=100)

        self.model_voting = VotingRegressor(estimators=[('gb', reg1),('rf', reg2)])
        self.model_voting.fit(self.x_train,self.y_train)

        y_pred=self.model_voting.predict(self.x_test)
        
        result=utilities.return_dic(y_pred,self.y_test)
        return result

    def get_all_predictions(self):
        xgboost=self.xgboost()
        voting=self.Voting()
        rf=self.RandomForest()

        print("XGBoost:",xgboost)
        print("Voting:",voting)
        print("Random Forest:",rf)

    def get_best_predictions(self):
        print(self.return_best_model())
        

    def save_best_model(self):
        best_model=self.return_best_model()[0]

        if best_model=="XGBoost":
            model=self.model_xg
        elif best_model=="Voting":
            model=self.model_voting
        elif best_model=="Random Forest":
            model=self.model_rf

        pickle.dump(model, open("model/regressormodel.sav",'wb'))
        print("model saved successfully")
  

    def return_best_model(self):
        xgboost=self.xgboost()
        voting=self.Voting()
        rf=self.RandomForest()

        models=['XGBoost','Voting','Random Forest']
        max=np.argmax([xgboost['r2'],voting['r2'],rf['r2']])

        best_model=models[max]

        if best_model=="XGBoost":
            return ("XGBoost",xgboost)
        elif best_model=="Voting":
            return ("Voting",voting)
        elif best_model=="Random Forest":
            return ("Random Forest",rf) 
        

